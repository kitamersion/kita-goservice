name: 🏷️ Create Release

on:
  workflow_dispatch:
    inputs:
      version_type:
        description: "Version increment type"
        required: true
        default: "patch"
        type: choice
        options:
          - patch
          - minor
          - major
      pre_release:
        description: "Mark as pre-release"
        required: false
        default: false
        type: boolean
      release_notes:
        description: "Custom release notes (optional)"
        required: false
        type: string

env:
  GO_VERSION: "1.21"

jobs:
  create-release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Fetch all history for proper versioning

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Get latest tag
        id: get_latest_tag
        run: |
          # Get the latest tag, default to v0.0.0 if no tags exist
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
          echo "latest_tag=$LATEST_TAG" >> $GITHUB_OUTPUT
          echo "Latest tag: $LATEST_TAG"

      - name: Calculate next version
        id: next_version
        uses: reecetech/version-increment@2024.10.1
        with:
          scheme: semver
          increment: ${{ github.event.inputs.version_type }}
          release_branch: main
          use_api: true

      - name: Generate release notes
        id: generate_notes
        uses: mikepenz/release-changelog-builder-action@v4
        with:
          fromTag: ${{ steps.get_latest_tag.outputs.latest_tag }}
          toTag: ${{ steps.next_version.outputs.new_version }}
          token: ${{ secrets.GITHUB_TOKEN }}
          configurationJson: |
            {
                "categories": [
                    {
                        "title": "## 🚀 Features",
                        "labels": ["feat"]
                    },
                    {
                        "title": "## 🐛 Fixes",
                        "labels": ["fix"]
                    },
                    {
                        "title": "## 🧪 Tests",
                        "labels": ["test"]
                    }
                ],
                "sort": "ASC",
                "template": "${{CHANGELOG}}",
                "pr_template": "- ${{TITLE}}\n   - PR: #${{NUMBER}}",
                "empty_template": "- no changes",
                "max_pull_requests": 1000,
                "max_back_track_time_days": 1000
            }

      - name: Prepare release notes
        id: prepare_notes
        run: |
          CUSTOM_NOTES="${{ github.event.inputs.release_notes }}"
          AUTO_NOTES="${{ steps.generate_notes.outputs.changelog }}"
          CONTRIBUTORS="${{ steps.generate_notes.outputs.contributors }}"

          if [ -n "$CUSTOM_NOTES" ]; then
            echo "$CUSTOM_NOTES" > release_notes.md
            echo "" >> release_notes.md
            echo "$AUTO_NOTES" >> release_notes.md
          else
            echo "$AUTO_NOTES" > release_notes.md
          fi

          if [ -n "$CONTRIBUTORS" ]; then
            echo "\n## 👥 Contributors\n\nThanks to all contributors who made this release possible:\n$CONTRIBUTORS" >> release_notes.md
          fi

      - name: Run tests before release
        run: |
          go mod download
          go test -v ./...
          go vet ./...

      - name: Build release binaries
        run: |
          NEW_VERSION="${{ steps.next_version.outputs.new_version }}"
          mkdir -p dist

          # Build for multiple platforms (matching your Docker approach)
          for app in api graph consumer; do
            for GOOS in linux darwin; do
              for GOARCH in amd64 arm64; do
                BIN_NAME="${{ github.event.repository.name }}-${app}-${GOOS}-${GOARCH}"
                GOOS=$GOOS GOARCH=$GOARCH go build -trimpath -ldflags "-X main.version=$NEW_VERSION" -o dist/$BIN_NAME ./cmd/$app
              done
            done
            # Windows amd64
            GOOS=windows GOARCH=amd64 go build -trimpath -ldflags "-X main.version=$NEW_VERSION" -o dist/${{ github.event.repository.name }}-${app}-windows-amd64.exe ./cmd/$app
          done

          # Create checksums
          cd dist
          sha256sum * > checksums.txt

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.next_version.outputs.new_version }}
          name: ${{ steps.next_version.outputs.new_version }}
          body_path: release_notes.md
          draft: false
          prerelease: ${{ github.event.inputs.pre_release }}
          files: |
            dist/${{ github.event.repository.name }}-*
            dist/checksums.txt
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Output release info
        run: |
          echo "🎉 Release created successfully!"
          echo "Version: ${{ steps.next_version.outputs.new_version }}"
          echo "Pre-release: ${{ github.event.inputs.pre_release }}"
          echo "Release URL: https://github.com/${{ github.repository }}/releases/tag/${{ steps.next_version.outputs.new_version }}"
